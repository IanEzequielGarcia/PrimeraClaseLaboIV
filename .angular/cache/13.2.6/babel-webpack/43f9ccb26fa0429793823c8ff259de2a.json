{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"@angular/fire/compat/auth\";\nimport * as i3 from \"@angular/router\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(afStore, ngFireAuth, router, ngZone) {\n      this.afStore = afStore;\n      this.ngFireAuth = ngFireAuth;\n      this.router = router;\n      this.ngZone = ngZone;\n      this.ngFireAuth.authState.subscribe(user => {\n        if (user) {\n          this.userData = user;\n          localStorage.setItem('user', JSON.stringify(this.userData));\n          JSON.parse(localStorage.getItem('user') || '{}');\n        } else {\n          localStorage.setItem('user', '');\n          JSON.parse(localStorage.getItem('user') || '{}');\n        }\n      });\n    } // Login in with email/password\n\n\n    SignIn(email, password) {\n      return this.ngFireAuth.signInWithEmailAndPassword(email, password);\n    } // Register user with email/password\n\n\n    RegisterUser(email, password) {\n      return this.ngFireAuth.createUserWithEmailAndPassword(email, password);\n    } // Email verification when new user register\n\n    /*\r\n    SendVerificationMail() {\r\n      return this.ngFireAuth.currentUser\r\n        .then((user) =>user.sendEmailVerification())\r\n        .then(() => {\r\n          this.router.navigate(['verify-email-address']);\r\n        });\r\n    }\r\n    */\n    // Recover password\n\n\n    PasswordRecover(passwordResetEmail) {\n      return this.ngFireAuth.sendPasswordResetEmail(passwordResetEmail).then(() => {\n        window.alert('Password reset email has been sent, please check your inbox.');\n      }).catch(error => {\n        window.alert(error);\n      });\n    } // Returns true when user is looged in\n\n\n    get isLoggedIn() {\n      const user = JSON.parse(localStorage.getItem('user') || '{}');\n      return user !== null && user.emailVerified !== false ? true : false;\n    } // Returns true when user's email is verified\n\n    /*get isEmailVerified(): boolean {\r\n      const user = JSON.parse(localStorage.getItem('user')|| '{}') ;\r\n      return user.emailVerified !== false ? true : false;\r\n    }*/\n    // Sign in with Gmail\n\n    /*GoogleAuth() {\r\n      return this.AuthLogin(new auth.GoogleAuthProvider());\r\n    }*/\n    // Auth providers\n\n    /*AuthLogin(provider:any) {\r\n      return this.ngFireAuth\r\n        .signInWithPopup(provider)\r\n        .then((result) => {\r\n          this.ngZone.run(() => {\r\n            this.router.navigate(['dashboard']);\r\n          });\r\n          this.SetUserData(result.user);\r\n        })\r\n        .catch((error) => {\r\n          window.alert(error);\r\n        });\r\n    }*/\n    // Store user in localStorage\n\n\n    SetUserData(user) {\n      const userRef = this.afStore.doc(`users/${user.uid}`);\n      const userData = {\n        uid: user.uid,\n        email: user.email,\n        displayName: user.displayName,\n        photoURL: user.photoURL,\n        emailVerified: user.emailVerified\n      };\n      return userRef.set(userData, {\n        merge: true\n      });\n    } // Sign-out\n\n\n    SignOut() {\n      return this.ngFireAuth.signOut().then(() => {\n        localStorage.removeItem('user');\n        this.router.navigate(['login']);\n      });\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireAuth), i0.ɵɵinject(i3.Router), i0.ɵɵinject(i0.NgZone));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}